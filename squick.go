package squick

import (
	"bytes"
	"embed"
	"fmt"
	"go/format"
	"os"
	"text/template"
	"time"

	"github.com/iancoleman/strcase"
)

const header = "// Code generated by squick at %v."

//go:embed templates/*
var fs embed.FS

var funcs = template.FuncMap{
	"header": func() string {
		return fmt.Sprintf(header, time.Now().Format(time.RFC3339))
	},
	"in": func(a []string, v string) bool {
		for _, s := range a {
			if s == v {
				return true
			}
		}
		return false
	},
	"lower": strcase.ToLowerCamel,
}

type Squick struct {
	tpl *template.Template
}

func New() (*Squick, error) {
	tpl, err := template.
		New("squick").
		Funcs(funcs).
		ParseFS(fs, "templates/*")
	if err != nil {
		return nil, err
	}

	return &Squick{tpl: tpl}, nil
}

func (s *Squick) Init(driver, pkg string) error {
	if _, err := os.Stat(pkg); os.IsExist(err) {
		return fmt.Errorf("directory %s already exists", pkg)
	}
	if err := os.Mkdir(pkg, 0700); err != nil {
		return err
	}

	load := struct {
		Driver  string
		Package string
	}{
		Driver:  driver,
		Package: pkg,
	}

	var buf bytes.Buffer
	if err := s.tpl.ExecuteTemplate(&buf, "init", load); err != nil {
		return err
	}

	data, err := format.Source(buf.Bytes())
	if err != nil {
		return err
	}

	if err := os.WriteFile(fmt.Sprintf("%s/%s.go", pkg, pkg), data, 0700); err != nil {
		return err
	}

	return nil
}

func (s *Squick) Make() error {
	return nil
}
