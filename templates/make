{{ header }}
{{ command }}
package {{ package .Package }}

{{ if or .Imports .Dependencies }}
import (
    {{ range .Imports }}
    "{{ . }}"
    {{- end }}

    {{ range .Dependencies }}
    "{{ . }}"
    {{- end }}
)
{{ end }}

type {{ .Model }} struct {
    {{- range $col := .Columns }}
    {{ .Name }} {{ if .Nullable }}*{{ end }}{{ .Type }} `db:"{{ .DBName }}"{{ range .Tags }}{{ if . }} {{ . }}:"{{ camel $col.Name }}{{ if $col.Nullable }},omitempty{{ end }}"{{ end }}{{ end }}`
    {{- end }}

    db *DB
}

{{- $model := camel $.Model }}
{{ range $op := .Operations }}
{{- if eq $op.Name "set" -}}
{{- range $arg := $op.Args -}}
func ({{ $model }} *{{ $.Model }}) Set{{ pascal $arg }}({{ camel $arg }} {{ index $.ColumnTypes $arg}}) error {
    {{ $model }}.{{ pascal $arg }} = {{ if index $.ColumnNullable $arg }}&{{ end }}{{ camel $arg }}
    const query = `UPDATE {{ $.Table }} SET {{ $arg }}=$1{{ if and $.UpdatedField (eq $arg $.UpdatedField | not) }}, {{ $.UpdatedField}}=now(){{ end }} WHERE {{ $.PrimaryKey }}=$2`
    _, err := {{ $model }}.db.Exec(query, {{ camel $arg }}, {{ $model }}.{{ pascal $.PrimaryKey }})
    return err
}

{{ end -}}
{{- else if eq $op.Name "get" }}
{{- range $arg := $op.Args -}}
func (db *DB) {{ $.Model }}By{{ pascal $arg }}({{ camel $arg }} {{ index $.ColumnTypes $arg}}) ({{ $model }} {{ $.Model }}, _ error) {
    {{ $model }}.db = db
    const query = `SELECT * FROM {{ $.Table }} WHERE {{ $arg }}=$1`
    return {{ $model }}, db.Get(&{{ $model }}, query, {{ camel $arg }})
}

{{ end -}}
{{- else if eq $op.Name "select" }}
{{- range $arg := $op.Args -}}
func (db *DB) {{ plural $.Model }}By{{ pascal $arg }}({{ camel $arg }} {{ index $.ColumnTypes $arg}}) ([]{{ $.Model }}, error) {
    const query = `SELECT * FROM {{ $.Table }} WHERE {{ $arg }}=$1`

    var {{ plural $model }} []{{ $.Model }}
    if err := db.Select(&{{ plural $model }}, query, {{ camel $arg }}); err != nil {
        return nil, err
    }

    for i := range {{ plural $model }} {
        {{ plural $model }}[i].db = db
    }

    return {{ plural $model }}, nil
}

{{ end -}}
{{- else if eq $op.Name "insert" }}
func (db *DB) Insert{{ $.Model }}({{ camel $.Model }} {{ $.Model }}) ({{ camel $.PrimaryKey}} {{ index $.ColumnTypes $.PrimaryKey }}, _ error) {
    data := map[string]interface{}{
        {{- range $.Columns }}
        "{{ .DBName }}": {{ if index $.ColumnNullable .Name }}*{{ end }}{{ camel $.Model }}.{{ .Name }},
        {{- end }}
    }
    for _, col := range {{ camel $.Model }}Columns {
        if v, ok := data[col]; ok && reflect.ValueOf(v).IsZero() {
            delete(data, col)
        }
    }

    var (
        cols []string
        vals []interface{}
    )
    for col, val := range data {
        cols = append(cols, col)
        vals = append(vals, val)
    }

    query, args, err := squirrel.
        Insert("{{ $.Table }}").
        Columns(cols...).
        Values(vals...).
        Suffix(`RETURNING "{{ $.PrimaryKey }}"`).
        PlaceholderFormat(squirrel.Dollar).
        ToSql()
    if err != nil {
        return {{ camel $.PrimaryKey }}, err
    }

    rows, err := db.Query(query, args...)
    if err != nil {
        return {{ camel $.PrimaryKey }}, err
    }
    defer rows.Close()

    if rows.Next() {
        if err := rows.Scan(&{{ camel $.PrimaryKey }}); err != nil {
            return {{ camel $.PrimaryKey }}, err
        }
    }

    return {{ camel $.PrimaryKey }}, nil
}

{{ else if eq $op.Name "update" }}
func (db *DB) Update{{ $.Model }}({{ camel $.PrimaryKey }} {{ index $.ColumnTypes $.PrimaryKey }}, {{ camel $.Model }} {{ $.Model }}, force ...Force) error {
    data := map[string]interface{}{
        {{ if $.UpdatedField }}"{{ $.UpdatedField }}": time.Now(),{{ end }}
        {{- range $.Columns -}}
        {{ if in $.Blacklist .DBName | not }}
        "{{- .DBName }}": {{ if index $.ColumnNullable .Name }}*{{ end }}{{ camel $.Model }}.{{ .Name }},{{ end }}
        {{- end }}
    }
    if len(force) == 0 {
        for _, col := range {{ camel $.Model }}Columns {
            if v, ok := data[col]; ok && reflect.ValueOf(v).IsZero() {
                delete(data, col)
            }
        }
    }

    query, args, err := squirrel.
        Update("{{ $.Table }}").
        SetMap(data).
        Where(squirrel.Eq{"{{ $.PrimaryKey }}": {{ camel $.PrimaryKey }}}).
        PlaceholderFormat(squirrel.Dollar).
        ToSql()
    if err != nil {
        return err
    }

    _, err = db.Exec(query, args...)
    return err
}

{{ else if eq $op.Name "delete" }}
func (db *DB) Delete{{ $.Model }}({{ camel $.PrimaryKey }} {{ index $.ColumnTypes $.PrimaryKey }}) error {
    const query = `DELETE FROM {{ $.Table }} WHERE {{ $.PrimaryKey }}=$1`
    _, err := db.Exec(query, {{ camel $.PrimaryKey }})
    return err
}

{{ else if eq $op.Name "exists" }}
func (db *DB) {{ $.Model }}Exists({{ camel $.PrimaryKey }} {{ index $.ColumnTypes $.PrimaryKey }}) (exists bool, _ error) {
    const query = `SELECT EXISTS(SELECT 1 FROM {{ $.Table }} WHERE {{ $.PrimaryKey }}=$1)`
    return exists, db.Get(&exists, query, {{ camel $.PrimaryKey }})
}

{{ else if eq $op.Name "count" }}
{{- range $arg := $op.Args -}}
func (db *DB) Count{{ $.Model }}By{{ pascal $arg }}({{ camel $arg }} {{ index $.ColumnTypes $arg}}) (count int, _ error) {
    const query = `SELECT COUNT(*) FROM {{ $.Table }} WHERE {{ $arg }}=$1`
    return count, db.Get(&count, query, {{ $arg }})
}

{{ end -}}
{{ end -}}
{{ end -}}

var {{ camel .Model }}Columns = []string{
{{- range .Columns }}
"{{ .DBName }}",
{{- end }}
}